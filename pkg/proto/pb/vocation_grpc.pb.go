// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: pkg/proto/vocation.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VocationService_Add_FullMethodName    = "/vocation.VocationService/Add"
	VocationService_Delete_FullMethodName = "/vocation.VocationService/Delete"
	VocationService_Get_FullMethodName    = "/vocation.VocationService/Get"
)

// VocationServiceClient is the client API for VocationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VocationServiceClient interface {
	Add(ctx context.Context, in *AddVocationRequest, opts ...grpc.CallOption) (*Response, error)
	Delete(ctx context.Context, in *DeleteVocationRequest, opts ...grpc.CallOption) (*Response, error)
	Get(ctx context.Context, in *GetVocationRequest, opts ...grpc.CallOption) (*GetVocationResponse, error)
}

type vocationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVocationServiceClient(cc grpc.ClientConnInterface) VocationServiceClient {
	return &vocationServiceClient{cc}
}

func (c *vocationServiceClient) Add(ctx context.Context, in *AddVocationRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, VocationService_Add_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vocationServiceClient) Delete(ctx context.Context, in *DeleteVocationRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, VocationService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vocationServiceClient) Get(ctx context.Context, in *GetVocationRequest, opts ...grpc.CallOption) (*GetVocationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVocationResponse)
	err := c.cc.Invoke(ctx, VocationService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VocationServiceServer is the server API for VocationService service.
// All implementations must embed UnimplementedVocationServiceServer
// for forward compatibility.
type VocationServiceServer interface {
	Add(context.Context, *AddVocationRequest) (*Response, error)
	Delete(context.Context, *DeleteVocationRequest) (*Response, error)
	Get(context.Context, *GetVocationRequest) (*GetVocationResponse, error)
	mustEmbedUnimplementedVocationServiceServer()
}

// UnimplementedVocationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVocationServiceServer struct{}

func (UnimplementedVocationServiceServer) Add(context.Context, *AddVocationRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedVocationServiceServer) Delete(context.Context, *DeleteVocationRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedVocationServiceServer) Get(context.Context, *GetVocationRequest) (*GetVocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedVocationServiceServer) mustEmbedUnimplementedVocationServiceServer() {}
func (UnimplementedVocationServiceServer) testEmbeddedByValue()                         {}

// UnsafeVocationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VocationServiceServer will
// result in compilation errors.
type UnsafeVocationServiceServer interface {
	mustEmbedUnimplementedVocationServiceServer()
}

func RegisterVocationServiceServer(s grpc.ServiceRegistrar, srv VocationServiceServer) {
	// If the following call pancis, it indicates UnimplementedVocationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VocationService_ServiceDesc, srv)
}

func _VocationService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddVocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VocationServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VocationService_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VocationServiceServer).Add(ctx, req.(*AddVocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VocationService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VocationServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VocationService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VocationServiceServer).Delete(ctx, req.(*DeleteVocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VocationService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VocationServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VocationService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VocationServiceServer).Get(ctx, req.(*GetVocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VocationService_ServiceDesc is the grpc.ServiceDesc for VocationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VocationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vocation.VocationService",
	HandlerType: (*VocationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _VocationService_Add_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _VocationService_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _VocationService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/vocation.proto",
}
